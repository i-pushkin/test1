version: "3.4"

x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: 512m 
    max-file: 3
    compress: "true"

x-app:
  &app-base
  image: ozforensics/oz-api:5.2.0-systemd
  entrypoint: [ "bash" ]
  restart: unless-stopped
  logging: *default-logging

services:

#######################################
#
# GENERAL COMPONENTS
#
#######################################
  oz-api:
    container_name: oz-api
    <<: *app-base
    command:
      - "-c"
      - 'cd /opt/gateway && 
        source env/bin/activate && 
        gunicorn oz_gateway.wsgi 
        --workers=6
        --bind=0.0.0.0:8000
        --preload 
        --config /opt/gateway/configs/gunicorn.conf.py
        --access-logfile - 
        --error-logfile - 
        --log-level debug
        --backlog 2048
        --access-logformat ''[%(t)s: xray=None, user_id=None: INFO] "%(r)s" %\L)s sec. %(s)s %(b)s''
        --max-requests 1000
        --timeout 120'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/version"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s        
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/api/gunicorn.conf.py:/opt/gateway/configs/gunicorn.conf.py
      - ./data/api/static:/opt/gateway/static
    ports:
      - "8000:8000"
    depends_on:
      oz-api-pg:
        condition: service_started
      oz-redis:
        condition: service_started
      init-db:
        condition: service_completed_successfully

  oz-celery-beat:
    container_name: oz-celery-beat
    <<: *app-base
    command:
      - "-c"
      - 'cd /opt/gateway/ && 
        source env/bin/activate && 
        /opt/gateway/env/bin/celery 
        -A oz_gateway.celery_config
        beat
        --loglevel=INFO
        --schedule=/tmp/celery_schedule.db'
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
    depends_on:
      - oz-api-pg
      - oz-redis

  oz-celery-default:
    container_name: oz-celery-default
    <<: *app-base
    command:
      - "-c"
      - 'cd /opt/gateway/ && 
        source env/bin/activate && 
        /opt/gateway/env/bin/celery 
        -A oz_gateway.celery_config
        worker 
        -n default@%h 
        --heartbeat-interval=5 
        -Q default
        -c 2
        --prefetch-multiplier 2
        --loglevel=INFO'
    healthcheck:
      test: ["CMD", "bash", "/opt/gateway/health_check_celery_default.sh"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 40s        
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/api/health_check_celery_default.sh:/opt/gateway/health_check_celery_default.sh
      - ./data/api/static:/opt/gateway/static
    depends_on:
      - oz-api-pg
      - oz-redis

  oz-celery-maintenance:
    container_name: oz-celery-maintenance
    <<: *app-base
    command:
      - "-c"
      - 'cd /opt/gateway/ && 
        source env/bin/activate && 
        /opt/gateway/env/bin/celery 
        -A oz_gateway.celery_config
        worker 
        -n maintenance@%h 
        --heartbeat-interval=5 
        -Q maintenance
        -c 2
        --prefetch-multiplier 2
        --loglevel=INFO'
    healthcheck:
      test: ["CMD", "bash", "/opt/gateway/health_check_celery_maintenance.sh"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 40s        
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/api/health_check_celery_maintenance.sh:/opt/gateway/health_check_celery_maintenance.sh
      - ./data/api/static:/opt/gateway/static
    depends_on:
      - oz-api-pg
      - oz-redis

  oz-celery-preview_convert:
    container_name: oz-celery-preview_convert
    <<: *app-base
    command:
      - "-c"
      - 'cd /opt/gateway/ && 
        source env/bin/activate && 
        /opt/gateway/env/bin/celery 
        -A oz_gateway.celery_config
        worker 
        -n preview_convert@%h 
        --heartbeat-interval=5 
        -Q preview_convert
        -c 2
        --prefetch-multiplier 2
        --loglevel=INFO'
    healthcheck:
      test: ["CMD", "bash", "/opt/gateway/health_check_celery_preview.sh"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 40s                
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/api/health_check_celery_preview.sh:/opt/gateway/health_check_celery_preview.sh
      - ./data/api/static:/opt/gateway/static
    depends_on:
      - oz-api-pg
      - oz-redis

  oz-celery-resolution:
    container_name: oz-celery-resolution
    <<: *app-base
    command:
      - "-c"
      - 'cd /opt/gateway/ && 
        source env/bin/activate && 
        /opt/gateway/env/bin/celery 
        -A oz_gateway.celery_config
        worker 
        -n resolution@%h 
        --heartbeat-interval=5 
        -Q resolution
        -c 2
        --prefetch-multiplier 2
        --loglevel=INFO'
    healthcheck:
      test: ["CMD", "bash", "/opt/gateway/health_check_celery_resolution.sh"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 40s           
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/api/health_check_celery_resolution.sh:/opt/gateway/health_check_celery_resolution.sh
      - ./data/api/static:/opt/gateway/static
    depends_on:
      - oz-api-pg
      - oz-redis

  oz-celery-tfss:
    container_name: oz-celery-tfss
    <<: *app-base
    command:
      - "-c"
      - 'cd /opt/gateway/ && 
        source env/bin/activate && 
        /opt/gateway/env/bin/celery 
        -A oz_gateway.celery_config
        worker 
        -n tfss@%h 
        --heartbeat-interval=5 
        -Q tfss
        -c 2
        --prefetch-multiplier 2
        --loglevel=INFO'
    healthcheck:
      test: ["CMD", "bash", "/opt/gateway/health_check_celery_tfss.sh"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 40s          
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/api/health_check_celery_tfss.sh:/opt/gateway/health_check_celery_tfss.sh
      - ./data/api/static:/opt/gateway/static
    depends_on:
      - oz-api-pg
      - oz-redis

  oz-celery-regula:
    container_name: oz-celery-regula
    <<: *app-base
    command:
      - "-c"
      - 'cd /opt/gateway/ && 
        source env/bin/activate && 
        /opt/gateway/env/bin/celery 
        -A oz_gateway.celery_config
        worker 
        -n regula@%h 
        --heartbeat-interval=5 
        -Q regula
        -c 2
        --prefetch-multiplier 2
        --loglevel=INFO'
    healthcheck:
      test: ["CMD", "bash", "/opt/gateway/health_check_celery_regula.sh"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 40s           
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/api/health_check_celery_regula.sh:/opt/gateway/health_check_celery_regula.sh
      - ./data/api/static:/opt/gateway/static
    depends_on:
      - oz-api-pg
      - oz-redis
  
  oz-api-pg:
    container_name: oz-api-pg
    image: postgres:15.5-bullseye
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "127.0.0.1", "-p", "5432"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s      
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./data/postgres/db/:/var/lib/postgresql/data
      - ./configs/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    logging: *default-logging
    # ports:
    #   - "5432:5432"

  init-user:
    container_name: init-user
    <<: *app-base
    command: 
      - -c
      - /init.sh
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/init/init-user.sh:/init.sh
    restart: no
    depends_on:
      oz-api:
        condition: service_started

  init-db:
    container_name: oz-init-db
    <<: *app-base
    command: 
      - -c
      - /init.sh
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/init/init-db.sh:/init.sh
    restart: no
    depends_on:
      oz-api-pg:
        condition: service_started

  oz-redis:
    container_name: oz-redis
    image: ozforensics/oz-api-redis:6.2.14-debian-12-r23
    entrypoint: [ "redis-server" ]
    command: [ "/usr/local/etc/redis/redis.conf" ]
    healthcheck:
      test: ["CMD", "bash", "/usr/local/etc/redis/health_check_redis.sh"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s    
    volumes:
      - ./data/redis:/data
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./configs/redis/health_check_redis.sh:/usr/local/etc/redis/health_check_redis.sh
    restart: unless-stopped
    logging: *default-logging

  oz-webui:
    container_name: oz-webui
    image: ozforensics/oz-web-ui:1.3.3
    entrypoint: [ "/bin/bash" ]
    command:
      - -c
      - /aquireToken.sh
    environment:
      - APP_NAME=${WEB_UI_APP_NAME}
      - APP_ENV=${WEB_UI_APP_ENV}
      - APP_KEY=${WEB_UI_APP_KEY}
      - APP_DEBUG=${WEB_UI_APP_DEBUG}
      - DEBUGBAR_ENABLED=${WEB_UI_DEBUGBAR_ENABLED}
      - APP_TIMEZONE=${WEB_UI_APP_TIMEZONE}
      - APP_URL=${WEB_UI_APP_URL}
      - LOG_CHANNEL=${WEB_UI_LOG_CHANNEL}
      - DB_CONNECTION=${WEB_UI_DB_CONNECTION}
      - BROADCAST_DRIVER=${WEB_UI_BROADCAST_DRIVER}
      - CACHE_DRIVER=${WEB_UI_CACHE_DRIVER}
      - QUEUE_CONNECTION=${WEB_UI_QUEUE_CONNECTION}
      - SESSION_DRIVER=${WEB_UI_SESSION_DRIVER}
      - SESSION_LIFETIME=${WEB_UI_SESSION_LIFETIME}
      - MAIL_HOST=${WEB_UI_MAIL_HOST}
      - MAIL_PORT=${WEB_UI_MAIL_PORT}
      - MAIL_USERNAME=${WEB_UI_MAIL_USERNAME}
      - MAIL_PASSWORD=${WEB_UI_MAIL_PASSWORD}
      - MAIL_ENCRYPTION=${WEB_UI_MAIL_ENCRYPTION}
      - MAIL_FROM_ADDRESS=${WEB_UI_MAIL_FROM_ADDRESS}
      - MAIL_FROM_NAME=${WEB_UI_MAIL_FROM_NAME}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/login"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./configs/webui/aquireToken.sh:/aquireToken.sh
    restart: unless-stopped
    ports:
      - "80:80"
    logging: *default-logging
    depends_on:
      - oz-api

  oz-statistic:
    container_name: oz-statistic
    image: ozforensics/oz-api-stat:0.1.43
    environment:
      - APP_NAME=${STATISTICS_APP_NAME}
      - APP_ENV=${STATISTICS_APP_ENV}
      - APP_KEY=${STATISTICS_APP_KEY}
      - APP_DEBUG=${STATISTICS_APP_DEBUG}
      - APP_URL=${STATISTICS_APP_URL}
      - LOG_CHANNEL=${STATISTICS_LOG_CHANNEL}
      - DB_CONNECTION=${STATISTICS_DB_CONNECTION}
      - DB_HOST=${STATISTICS_DB_HOST}
      - DB_PORT=${STATISTICS_DB_PORT}
      - DB_DATABASE=${STATISTICS_DB_DATABASE}
      - DB_USERNAME=${STATISTICS_DB_USERNAME}
      - DB_PASSWORD=${STATISTICS_DB_PASSWORD}
      - BROADCAST_DRIVER=${STATISTICS_BROADCAST_DRIVER}
      - CACHE_DRIVER=${STATISTICS_CACHE_DRIVER}
      - QUEUE_CONNECTION=${STATISTICS_QUEUE_CONNECTION}
      - SESSION_DRIVER=${STATISTICS_SESSION_DRIVER}
      - SESSION_LIFETIME=${STATISTICS_SESSION_LIFETIME}
      - APP_TIMEZONE=${STATISTICS_APP_TIMEZONE}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/statistic"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s      
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - oz-api
      - oz-api-pg

  oz-api-nginx:
    container_name: oz-api-nginx
    image: nginxinc/nginx-unprivileged:1.24
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8880/server-status/"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s    
    volumes:
      - ./data/api/static:/opt/gateway/static
      - ./configs/nginx/default.conf:/etc/nginx/conf.d/default.conf
    # ports:
    #   - "8880:8880"
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - oz-api
      - oz-statistic

  oz-tfss:
    container_name: oz-tfss
    image: ozforensics/tensorflow-serving:2.5_lic_1.1.4-4_opt
    environment:
      - TF_ENABLE_ONEDNN_OPTS=0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/v1/models/dummy"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 600s      
    volumes:
      - ./data/tfss/models:/models
      - ./configs/tfss/license.key:/license.key
      - ./configs/tfss/prometheus.conf:/prometheus.conf
    restart: unless-stopped
    ports:
      - "8501:8501"
    logging: *default-logging

  oz-bio-init:
    container_name: oz-bio-init
    image: ozforensics/oz-bio-init:1.0.10
    environment:
      - FTP_SERVER_HOST=${UPDATER_FTP_SERVER_HOST}
      - FTP_SERVER_PORT=${UPDATER_FTP_PORT}
      - FTP_USER_NAME=${UPDATER_FTP_USER_NAME}
      - FTP_USER_PASSWORD=${UPDATER_FTP_USER_PASSWORD}
      - CLEAN_DIRS_FIRST=${UPDATER_CLEAN_DIRS_FIRST}
      - FTP_USE_PASSIVE_MODE=${UPDATER_FTP_USE_PASSIVE_MODE}
    volumes:  
      - ./data/tfss/tmp:/app/downloads:rw
      - ./data/tfss/models:/app/models:rw

  oz-bio-updater:
    container_name: oz-bio-updater
    deploy:
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 500M
    image: ozforensics/oz-bio-deploy:2.0.8
    environment:
      - BIO_ADMIN_HOST=${UPDATER_BIO_ADMIN_HOST}
      - CLIENT_TOKEN=${UPDATER_CLIENT_TOKEN}
      - START_FTP=${UPDATER_START_FTP}
      - FTP_PORT=${UPDATER_FTP_PORT}
      - CHECK_UPDATES_ONCE=${UPDATER_CHECK_UPDATES_ONCE}
      - CHECK_UPDATES_PERIOD=${UPDATER_CHECK_UPDATES_PERIOD}
      - PUBLISHED_PATH=${UPDATER_PUBLISHED_PATH}
      - MODELS_DIRECTORY=${UPDATER_MODELS_DIRECTORY}
      - MODELS_ARCHIVE_NAME=${UPDATER_MODELS_ARCHIVE_NAME}
      - FTP_USER_NAME=${UPDATER_FTP_USER_NAME}
      - FTP_USER_PASSWORD=${UPDATER_FTP_USER_PASSWORD}
      - RESTART_PODS=${UPDATER_RESTART_PODS}
      - FTP_PERMIT_FOREIGN_ADDRESSES=${UPDATER_FTP_PERMIT_FOREIGN_ADDRESSES}
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/8521"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    volumes:
      - ./data/tfss/updater:/app/models:rw
    restart: unless-stopped
    ports:
      - "8521:8521"
      - "60000-60100:60000-60100"      

  # bioloadbalancer:
  #   image: nginx:1.27.3
  #   container_name: bioloadbalancer
  #   healthcheck:
  #     test: ["CMD-SHELL", "nginx -t || exit 1"]
  #     interval: 60s
  #     timeout: 5s
  #     retries: 3
  #   ports:
  #     - "9501:9501"       
  #   volumes:
  #     - ./configs/nginx/loadbalancer.conf:/etc/nginx/conf.d/loadbalancer.conf:ro
  #   restart: always



  oz-api-o2n:
    container_name: oz-api-o2n
    image: ozforensics/oz-api:o2n-0.3.2-7
    environment:
      - PROJECT_NAME=${O2N_PROJECT_NAME}
      - LOGGING_LEVEL=${O2N_LOGGING_LEVEL}
      - LOGGING_AS_JSON=${O2N_LOGGING_AS_JSON}
      - POSTGRES_HOST=${O2N_POSTGRES_HOST}
      - POSTGRES_PORT=${O2N_POSTGRES_PORT}
      - POSTGRES_USER=${O2N_POSTGRES_USER}
      - POSTGRES_PASSWORD=${O2N_POSTGRES_PASSWORD}
      - POSTGRES_DB_NAME=${O2N_POSTGRES_DB_NAME}   
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/api/ping/"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s          
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      oz-o2n-pg:
        condition: service_started
      oz-o2n-pg-init:
        condition: service_completed_successfully

  oz-o2n-pg-init:
    container_name: oz-o2n-pg-init
    image: ozforensics/oz-api:o2n-0.3.2-7
    entrypoint: [ "bash" ]
    command: 
      - -c
      - /init.sh
    env_file:
      - ./configs/o2n/.env
    volumes:
      - ./configs/api/config.py:/opt/gateway/configs/config.py
      - ./configs/init/init-o2n.sh:/init.sh
    logging: *default-logging
    depends_on:
      oz-o2n-pg:
        condition: service_started

  oz-o2n-pg:
    container_name: oz-o2n-pg
    image: ankane/pgvector:v0.5.1
    environment:
      - POSTGRES_PASSWORD=${PG_O2N_POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "127.0.0.1", "-p", "5432"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s        
    volumes:
      - ./data/pg-o2n/db:/var/lib/postgresql/data
      - ./configs/pg-o2n/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    # ports:
    #   - "5433:5432"
    logging: *default-logging

#######################################
#
# METRICS EXPORTERS
#
#######################################

  oz-api-flower:
    container_name: oz-api-flower
    image: ozforensics/oz-api:5.1.1-k8s-unprivileged
    volumes:
      - ./configs/api/flower/docker-entrypoint.sh:/entrypoint/docker-entrypoint.sh
      - ./configs/api/config.py:/opt/gateway/configs/config.py
    entrypoint: /entrypoint/docker-entrypoint.sh
    restart: unless-stopped
    ports:
      - "5555:5555"
    depends_on:
      - oz-api

  oz-redis-exporter:
    container_name: oz-redis-exporter
    image: ozforensics/prometheus-exporters:redis-1.58.0
    environment:
      - REDIS_ADDR=oz-redis:6379
      - REDIS_EXPORTER_WEB_LISTEN_ADDRESS=0.0.0.0:9117
      - REDIS_EXPORTER_WEB_TELEMETRY_PATH=/metrics/redis
      - REDIS_EXPORTER_CHECK_SINGLE_KEYS=db0=tfss,db0=unacked
    restart: unless-stopped
    ports:
      - "9117:9117"
    depends_on:
      - oz-api      

  oz-postgres-exporter:
    container_name: oz-postgres-exporter
    image: ozforensics/prometheus-exporters:postgres-exporter-0.15.0
    environment:
      - DATA_SOURCE_URI="oz-api-pg:5432/postgres?sslmode=disable"
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=ozapipass
    restart: unless-stopped
    ports:
      - "9187:9187"
    depends_on:
      - oz-api-pg        

  oz-nginx-exporter:
    container_name: oz-nginx-exporter
    image: ozforensics/prometheus-exporters:nginx-1.1.0
    environment:
      - LISTEN_ADDRESS=0.0.0.0:9113
      - SCRAPE_URI=http://oz-api-nginx:8880/server-status/
      - TELEMETRY_PATH=/metrics/nginx
    restart: unless-stopped
    ports:
      - "9113:9113"
    depends_on:
      - oz-api-nginx       
